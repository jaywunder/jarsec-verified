module correct-2 where
open import cfg
open import jarsec using (Parser ; run-parser ; partial-parse ; _>>=_ ; _>>_ ; _<*>_)

open import Data.Bool
open import Data.List hiding (lookup)
-- open import Data.Vec renaming ([_] to V[_] ; _++_ to _vv_) hiding (_>>=_)
open import Data.Fin hiding (_+_)
open import Data.Char
open import Agda.Builtin.Char renaming ( primCharEquality to charEq )
open import Data.Nat
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; _‚â¢_ ; refl)
open import Relation.Unary
open import Data.Maybe hiding (Any ; All)
open import Data.Sum hiding (map)
open import Data.String hiding (length ; _++_) renaming (primStringToList to ùïä‚ÜíùïÉ ; primStringFromList to ùïÉ‚Üíùïä)
open import Data.Product hiding (map)
open import Agda.Builtin.Unit
-- open import Data.List.Any
open import Data.List.All

postulate
  sym : ‚àÄ {A : Set} {x y : A} ‚Üí x ‚â° y ‚Üí y ‚â° x
  head-from-‚â° : ‚àÄ {A : Set} {x y : A} {xs ys : List A} ‚Üí (x List.‚à∑ xs) ‚â° (y ‚à∑ ys) ‚Üí x ‚â° y
  tail-from-‚â° : ‚àÄ {A : Set} {x y : A} {xs ys : List A} ‚Üí (x List.‚à∑ xs) ‚â° (y ‚à∑ ys) ‚Üí xs ‚â° ys

  charEq-T : ‚àÄ x c ‚Üí (charEq x c) ‚â° true ‚Üí x ‚â° c
  charEq-F : ‚àÄ x c ‚Üí (charEq x c) ‚â° false ‚Üí x ‚â¢ c


all++ : ‚àÄ {p} {A : Set} {P : Pred A p} {xs ys : List A} ‚Üí All P xs ‚Üí All P ys ‚Üí All P (xs ++ ys)
all++ [] [] = []
all++ [] (py ‚à∑ all‚ÇÇ) = py ‚à∑ (all++ [] all‚ÇÇ)
all++ (px ‚à∑ all‚ÇÅ) all‚ÇÇ = px ‚à∑ (all++ all‚ÇÅ all‚ÇÇ)

-- all++ : ‚àÄ {p} {A : Set} {P : Pred A p} (xs ys : List A) ‚Üí All P xs ‚Üí All P ys ‚Üí All P (xs ++ ys)
-- all++ [] [] [] [] = []
-- all++ [] (y ‚à∑ ys) [] (py ‚à∑ all‚ÇÇ) = py ‚à∑ all++ [] ys [] all‚ÇÇ
-- all++ (x ‚à∑ xs) ys (px ‚à∑ all‚ÇÅ) all‚ÇÇ = px ‚à∑ (all++ xs ys all‚ÇÅ all‚ÇÇ)

weaken-to-alt : ‚àÄ {r} {cfg‚ÇÅ cfg‚ÇÇ : Cfg 0} ‚Üí ( r ‚àà[ cfg‚ÇÅ ] ) ‚äé ( r ‚àà[ cfg‚ÇÇ ] ) ‚Üí r ‚àà[ alt cfg‚ÇÅ cfg‚ÇÇ ]
weaken-to-alt (inj‚ÇÅ e) = alt‚ÇÅ e
weaken-to-alt (inj‚ÇÇ e) = alt‚ÇÇ e

correct : let Result = List Char √ó List Char in
  ‚àÄ (cfg : Cfg 0) (cs : List Char)
  ‚Üí let rs = jarsec.parse (interp cfg) cs in
    All (Œª r ‚Üí ((proj‚ÇÅ r) ‚àà[ cfg ]) √ó (proj‚ÇÅ r) ++ (proj‚ÇÇ r) ‚â° cs) rs

correct emp cs = []
correct eps cs = (eps , refl) ‚à∑ []
correct (lit x) [] = []
correct (lit x) (c ‚à∑ cs) with charEq x c | charEq-T x c | charEq-F x c
... | true | b | d rewrite b refl = (lit c , refl) ‚à∑ []
... | false | b | d = []
correct (var ()) cs
correct (seq cfg‚ÇÅ cfg‚ÇÇ) cs with (Parser.parse (interp cfg‚ÇÅ >>= (Œª x ‚Üí interp cfg‚ÇÇ >>= (Œª y ‚Üí Parser.mk-parser (Œª str ‚Üí (x ++ y , str) ‚à∑ [])))) cs)
... | rs = {! (correct cfg‚ÇÅ cs)  !}

correct (alt cfg‚ÇÅ cfg‚ÇÇ) cs with (Parser.parse (interp (seq cfg‚ÇÅ cfg‚ÇÇ)) cs)
... | rs =
  let all‚ÇÅ = correct cfg‚ÇÅ cs
      all‚ÇÇ = correct cfg‚ÇÇ cs

      weak-all‚ÇÅ : All (Œª r ‚Üí proj‚ÇÅ r ‚àà[ alt cfg‚ÇÅ cfg‚ÇÇ ] √ó proj‚ÇÅ r ++ proj‚ÇÇ r ‚â° cs) (Parser.parse (interp cfg‚ÇÅ) cs)
      weak-all‚ÇÅ = Data.List.All.map
        (Œª r ‚Üí ((weaken-to-alt {cfg‚ÇÅ = cfg‚ÇÅ} {cfg‚ÇÇ = cfg‚ÇÇ} (inj‚ÇÅ (proj‚ÇÅ r))) , (proj‚ÇÇ r)))
        all‚ÇÅ

      weak-all‚ÇÇ : All (Œª r ‚Üí proj‚ÇÅ r ‚àà[ alt cfg‚ÇÅ cfg‚ÇÇ ] √ó proj‚ÇÅ r ++ proj‚ÇÇ r ‚â° cs) (Parser.parse (interp cfg‚ÇÇ) cs)
      weak-all‚ÇÇ = Data.List.All.map
        (Œª r ‚Üí (weaken-to-alt {cfg‚ÇÅ = cfg‚ÇÅ} {cfg‚ÇÇ = cfg‚ÇÇ} (inj‚ÇÇ (proj‚ÇÅ r))) , (proj‚ÇÇ r))
        all‚ÇÇ
        
  in all++ weak-all‚ÇÅ weak-all‚ÇÇ

correct (many cfg) cs = {!   !}
correct (fix cfg) cs = {! correct (fix cfg) cs  !}
















-- correct (alt cfg‚ÇÅ cfg‚ÇÇ) cs with (Parser.parse (jarsec.combine (interp cfg‚ÇÅ) (interp cfg‚ÇÇ)) cs)
-- ... | rs =
--   let all‚ÇÅ = correct cfg‚ÇÅ cs
--       all‚ÇÇ = correct cfg‚ÇÇ cs
--   in {! Data.List.All.map ? all‚ÇÅ  !}
--   where
--   rinduction : List (List Char √ó List Char) ‚Üí _
--   rinduction [] = []
--   rinduction (r ‚à∑ rs) =
--     let all‚ÇÅ = correct cfg‚ÇÅ cs
--         all‚ÇÇ = correct cfg‚ÇÇ cs
--     in Data.List.All.lookup all‚ÇÅ {!    !}
-- -- correct (alt cfg‚ÇÅ cfg‚ÇÇ) cs | [] = let all‚ÇÅ = correct cfg‚ÇÅ cs ; all‚ÇÇ = correct cfg‚ÇÇ cs in []
-- -- correct (alt cfg‚ÇÅ cfg‚ÇÇ) cs | r ‚à∑ rs =
-- --   let all‚ÇÅ = correct cfg‚ÇÅ cs
-- --       all‚ÇÇ = correct cfg‚ÇÇ cs
-- --   in ({! Data.List.All.lookup  !} , {!   !}) ‚à∑ {! correct (alt cfg‚ÇÅ cfg‚ÇÇ) cs  !}
